// <auto-generated />
using System;
using Infrastructure.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251005173354_Words")]
    partial class Words
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Theme", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Themes");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Users.UserWordsProgress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("CorrectCount")
                        .HasColumnType("integer");

                    b.Property<long?>("FillBlankId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NextReview")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("SuccessRate")
                        .HasColumnType("double precision");

                    b.Property<int>("TotalAttempts")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<long>("WordId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FillBlankId");

                    b.HasIndex("UserId");

                    b.HasIndex("WordId");

                    b.ToTable("UserWordsProgress");
                });

            modelBuilder.Entity("Domain.Entities.Words.Word", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AudioUrl")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<string>("Example")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<bool>("Mark")
                        .HasColumnType("boolean");

                    b.Property<string>("PartOfSpeech")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Transcription")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Translation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WordText")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("Word");

                    b.HasKey("Id");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("Domain.Entities.Words.WordFillBlank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BlankTemplate")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<long>("WordId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.ToTable("FillBlanks");
                });

            modelBuilder.Entity("Domain.Entities.Words.WordTheme", b =>
                {
                    b.Property<long>("WordId")
                        .HasColumnType("bigint");

                    b.Property<long>("ThemeId")
                        .HasColumnType("bigint");

                    b.HasKey("WordId", "ThemeId");

                    b.HasIndex("ThemeId");

                    b.ToTable("WordThemes");
                });

            modelBuilder.Entity("Domain.Entities.Users.UserWordsProgress", b =>
                {
                    b.HasOne("Domain.Entities.Words.WordFillBlank", "FillBlank")
                        .WithMany("WordProgresses")
                        .HasForeignKey("FillBlankId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("WordProgresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Words.Word", "Word")
                        .WithMany("WordProgresses")
                        .HasForeignKey("WordId");

                    b.Navigation("FillBlank");

                    b.Navigation("User");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Domain.Entities.Words.WordFillBlank", b =>
                {
                    b.HasOne("Domain.Entities.Words.Word", "Word")
                        .WithMany("FillBlanks")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Domain.Entities.Words.WordTheme", b =>
                {
                    b.HasOne("Domain.Entities.Theme", "Theme")
                        .WithMany("WordThemes")
                        .HasForeignKey("ThemeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Words.Word", "Word")
                        .WithMany("WordThemes")
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Theme");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Domain.Entities.Theme", b =>
                {
                    b.Navigation("WordThemes");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("WordProgresses");
                });

            modelBuilder.Entity("Domain.Entities.Words.Word", b =>
                {
                    b.Navigation("FillBlanks");

                    b.Navigation("WordProgresses");

                    b.Navigation("WordThemes");
                });

            modelBuilder.Entity("Domain.Entities.Words.WordFillBlank", b =>
                {
                    b.Navigation("WordProgresses");
                });
#pragma warning restore 612, 618
        }
    }
}
